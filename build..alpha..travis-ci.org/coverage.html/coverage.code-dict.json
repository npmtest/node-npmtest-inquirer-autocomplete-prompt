{"/home/travis/build/npmtest/node-npmtest-inquirer-autocomplete-prompt/test.js":"/* istanbul instrument in package npmtest_inquirer_autocomplete_prompt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-inquirer-autocomplete-prompt/lib.npmtest_inquirer_autocomplete_prompt.js":"/* istanbul instrument in package npmtest_inquirer_autocomplete_prompt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_inquirer_autocomplete_prompt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_inquirer_autocomplete_prompt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-inquirer-autocomplete-prompt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-inquirer-autocomplete-prompt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_inquirer_autocomplete_prompt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_inquirer_autocomplete_prompt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_inquirer_autocomplete_prompt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_inquirer_autocomplete_prompt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_inquirer_autocomplete_prompt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_inquirer_autocomplete_prompt.__dirname + '/lib.npmtest_inquirer_autocomplete_prompt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-inquirer-autocomplete-prompt/node_modules/inquirer-autocomplete-prompt/index.js":"/**\n * `autocomplete` type prompt\n */\n\nvar util = require('util');\nvar chalk = require('chalk');\nvar figures = require('figures');\nvar Base = require('inquirer/lib/prompts/base');\nvar Choices = require('inquirer/lib/objects/choices');\nvar observe = require('inquirer/lib/utils/events');\nvar utils = require('inquirer/lib/utils/readline');\nvar Paginator = require('inquirer/lib/utils/paginator');\nvar ansiEscapes = require('ansi-escapes');\n\n/**\n * Module exports\n */\n\nmodule.exports = Prompt;\n\n\n/**\n * Constructor\n */\n\nfunction Prompt() {\n  Base.apply(this, arguments);\n\n  if (!this.opt.source) {\n    this.throwParamError('source');\n  }\n\n  this.currentChoices = [];\n\n  this.firstRender = true;\n  this.selected = 0;\n\n  // Make sure no default is set (so it won't be printed)\n  this.opt.default = null;\n\n  this.paginator = new Paginator();\n}\nutil.inherits(Prompt, Base);\n\n\n/**\n * Start the Inquiry session\n * @param  {Function} cb      Callback when prompt is done\n * @return {this}\n */\n\nPrompt.prototype._run = function(cb) {\n  var self = this;\n  self.done = cb;\n\n  if (self.rl.history instanceof Array) {\n    self.rl.history = [];\n  }\n\n  var events = observe(self.rl);\n\n  events.line.takeWhile(dontHaveAnswer).forEach(self.onSubmit.bind(this));\n  events.keypress.takeWhile(dontHaveAnswer).forEach(self.onKeypress.bind(this));\n\n  function dontHaveAnswer() {\n    return !self.answer;\n  }\n\n  //call once at init\n  self.search(null);\n\n  return this;\n};\n\n\n/**\n * Render the prompt to screen\n * @return {Prompt} self\n */\n\nPrompt.prototype.render = function(error) {\n  // Render question\n  var content = this.getQuestion();\n  var bottomContent = '';\n\n  if (this.firstRender) {\n    var suggestText = this.opt.suggestOnly ? ', tab to autocomplete' : '';\n    content += chalk.dim('(Use arrow keys or type to search' + suggestText + ')');\n  }\n  // Render choices or answer depending on the state\n  if (this.status === 'answered') {\n    content += chalk.cyan(this.shortAnswer || this.answerName || this.answer);\n  } else if (this.searching) {\n    content += this.rl.line;\n    bottomContent += '  ' + chalk.dim('Searching...');\n  } else if (this.currentChoices.length) {\n    var choicesStr = listRender(this.currentChoices, this.selected);\n    content += this.rl.line;\n    bottomContent += this.paginator.paginate(choicesStr, this.selected, this.opt.pageSize);\n  } else {\n    content += this.rl.line;\n    bottomContent += '  ' + chalk.yellow('No results...');\n  }\n\n  if (error) {\n    bottomContent += '\\n' + chalk.red('>> ') + error;\n  }\n\n  this.firstRender = false;\n\n  this.screen.render(content, bottomContent);\n};\n\n/**\n * When user press `enter` key\n */\n\nPrompt.prototype.onSubmit = function(line) {\n  if (typeof this.opt.validate === 'function' && this.opt.suggestOnly) {\n    var validationResult = this.opt.validate(line);\n    if (validationResult !== true) {\n      this.render(validationResult || 'Enter something, tab to autocomplete!');\n      return;\n    }\n  }\n\n  var choice = {};\n  if (this.currentChoices.length <= this.selected && !this.opt.suggestOnly) {\n    this.rl.write(line);\n    this.search(line);\n    return;\n  }\n\n  if (this.opt.suggestOnly) {\n    choice.value = this.rl.line;\n    this.answer = line;\n    this.answerName = line;\n    this.shortAnswer = line;\n    this.rl.line = '';\n  } else {\n    choice = this.currentChoices.getChoice(this.selected);\n    this.answer = choice.value;\n    this.answerName = choice.name;\n    this.shortAnswer = choice.short;\n  }\n\n\n  this.status = 'answered';\n\n  // Rerender prompt\n  this.render();\n\n  this.screen.done();\n\n  this.done(choice.value);\n};\n\nPrompt.prototype.search = function(searchTerm) {\n  var self = this;\n  self.selected = 0;\n\n  //only render searching state after first time\n  if (self.searchedOnce) {\n    self.searching = true;\n    self.currentChoices = new Choices([]);\n    self.render(); //now render current searching state\n  } else {\n    self.searchedOnce = true;\n  }\n\n  self.lastSearchTerm = searchTerm;\n  var thisPromise = self.opt.source(self.answers, searchTerm);\n\n  //store this promise for check in the callback\n  self.lastPromise = thisPromise;\n\n  return thisPromise.then(function inner(choices) {\n    //if another search is triggered before the current search finishes, don't set results\n    if (thisPromise !== self.lastPromise) return;\n\n    choices = new Choices(choices.filter(function(choice) {\n      return choice.type !== 'separator';\n    }));\n\n    self.currentChoices = choices\n    self.searching = false;\n    self.render();\n  });\n\n};\n\n\nPrompt.prototype.ensureSelectedInRange = function() {\n  var selectedIndex = Math.min(this.selected, this.currentChoices.length); //not above currentChoices length - 1\n  this.selected = Math.max(selectedIndex, 0); //not below 0\n}\n\n\n/**\n * When user type\n */\n\nPrompt.prototype.onKeypress = function(e) {\n  var len;\n  var keyName = (e.key && e.key.name) || undefined;\n\n  if (keyName === 'tab' && this.opt.suggestOnly) {\n    this.rl.write(ansiEscapes.cursorLeft);\n    var autoCompleted = this.currentChoices.getChoice(this.selected).value;\n    this.rl.write(ansiEscapes.cursorForward(autoCompleted.length));\n    this.rl.line = autoCompleted\n    this.render();\n  } else if (keyName === 'down') {\n    len = this.currentChoices.length;\n    this.selected = (this.selected < len - 1) ? this.selected + 1 : 0;\n    this.ensureSelectedInRange();\n    this.render();\n    utils.up(this.rl, 2);\n  } else if (keyName === 'up') {\n    len = this.currentChoices.length;\n    this.selected = (this.selected > 0) ? this.selected - 1 : len - 1;\n    this.ensureSelectedInRange();\n    this.render();\n  } else {\n    this.render(); //render input automatically\n    //Only search if input have actually changed, not because of other keypresses\n    if (this.lastSearchTerm !== this.rl.line) {\n      this.search(this.rl.line); //trigger new search\n    }\n  }\n};\n\n\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\nfunction listRender(choices, pointer) {\n  var output = '';\n  var separatorOffset = 0;\n\n  choices.forEach(function(choice, i) {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += '  ' + choice + '\\n';\n      return;\n    }\n\n    var isSelected = (i - separatorOffset === pointer);\n    var line = (isSelected ? figures.pointer + ' ' : '  ') + choice.name;\n\n    if (isSelected) {\n      line = chalk.cyan(line);\n    }\n    output += line + ' \\n';\n  });\n\n  return output.replace(/\\n$/, '');\n}\n"}